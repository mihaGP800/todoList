{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","loginTC","fulfilled","authReducer","reducer","actions","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","isInitialized","setAppIsInitializedAC","appReducer","removeTodolistAC","filter","tl","addTodolistAC","unshift","todolist","entityStatus","changeTodolistTitleAC","index","findIndex","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","resetTodolistsAC","todolistsReducer","addTaskAC","todoListId","updateTaskAC","tasks","t","forEach","fetchTasksTC","removeTaskTC","splice","tasksReducer","items","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","startDate","catch","console","warn","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useDispatch","navigate","useNavigate","useEffect","todos","todo","thunk","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","resetForm","to","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42a67573.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f3f54432-d8c8-49d7-98bb-7ebfd06f7be2'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login: (data: LoginParamsType) => {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n    },\r\n\r\n    me: () => instance.get<ResponseType<MeResponseType>>('auth/me'),\r\n\r\n    logout: () => instance.delete<ResponseType>('auth/login')\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype MeResponseType = { id: number, email: string, login: string }\r\n\r\nexport type FieldErr = {\r\n    field: string\r\n    error: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<FieldErr>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({\r\n        error: error.message ? error.message : 'Some error' +\r\n            ' occurred'\r\n    }))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErr, LoginParamsType, todolistsAPI} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {resetTodolistsAC} from '../TodolistsList/todolists-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = createAsyncThunk<{isLoggedIn: boolean},LoginParamsType, {rejectValue: {\r\n        errors: Array<string>,\r\n        fieldsErrors?: Array<FieldErr>\r\n    }}>('auth/login', async (param: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({\r\n                errors: res.data.messages,\r\n                fieldsErrors: res.data.fieldsErrors\r\n            })\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({\r\n            errors: [error.message],\r\n            fieldsErrors: undefined\r\n        })\r\n    }\r\n})\r\n\r\nexport const _loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: false}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(resetTodolistsAC())\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nexport const initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setAppIsInitializedAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => dispatch(setAppIsInitializedAC({isInitialized: true})))\r\n}\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC,} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from './tasks-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, entityStatus: 'idle', filter: 'all'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const {id, title} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].title = title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const {id, filter} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].filter = filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const {id, status} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].entityStatus = status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists\r\n                .map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        resetTodolistsAC(state, action: PayloadAction) {\r\n            return []\r\n        },\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC, resetTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return res.data\r\n            })\r\n            .then(todos => {\r\n                todos.forEach(todo => dispatch(fetchTasksTC(todo.id)))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ResetTodolistsActionType = ReturnType<typeof resetTodolistsAC>;\r\n\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC,} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        // removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n        //     const tasks = state[action.payload.todolistId]\r\n        //     const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n        //     if (index !== -1) {\r\n        //         tasks.splice(index, 1)\r\n        //     }\r\n        // },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index !== -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(addTodolistAC, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(removeTodolistAC, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(setTodolistsAC, (state, action) => {\r\n                action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n            })\r\n            .addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {addTaskAC, updateTaskAC} = slice.actions\r\n\r\n// thunks\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n    const res = await todolistsAPI.getTasks(todolistId);\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {...param}\r\n    })\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer,} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}\r\n                        disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}\r\n                     disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t}\r\n                                                todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        } else navigate('/login')\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useAppDispatch, useAppSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {LoginParamsType} from '../../api/todolists-api';\r\n\r\ntype FormValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            // const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            const errors: Partial<Pick<LoginParamsType, 'password' | 'email' | 'rememberMe'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password.trim()) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.trim().length <= 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValues>) => {\r\n            const action = await dispatch(loginTC(values))\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) return <Navigate to={'/'}/>\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={formik.values.rememberMe} {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from '../features/Login/Login';\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport { CircularProgress } from '@mui/material'\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    let logoutHandle = () => dispatch(logoutTC());\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandle}>LogOUT</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\"\r\n                           element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT\r\n                               FOUND</h1>}/>\r\n                    <Route path=\"/*\" element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}