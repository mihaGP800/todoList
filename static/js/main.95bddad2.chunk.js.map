{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","loginTC","fulfilled","logoutTC","authReducer","reducer","actions","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","arg","resetTodolistsAC","isInitialized","initializeAppTC","appReducer","changeTodolistFilterAC","filter","index","findIndex","tl","changeTodolistEntityStatusAC","entityStatus","fetchTodolistsTC","todolists","map","removeTodolistTC","addTodolistTC","unshift","todolist","changeTodolistTitleTC","todolistsReducer","forEach","todo","fetchTasksTC","console","log","item","tasksReducer","tasks","removeTaskTC","t","splice","addTaskTC","todoListId","updateTaskTC","items","task","getState","find","apiModel","deadline","description","priority","startDate","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useDispatch","navigate","useNavigate","useEffect","thunk","changeStatus","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","to","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95bddad2.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f3f54432-d8c8-49d7-98bb-7ebfd06f7be2'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login: (data: LoginParamsType) => {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n    },\r\n\r\n    me: () => instance.get<ResponseType<MeResponseType>>('auth/me'),\r\n\r\n    logout: () => instance.delete<ResponseType>('auth/login')\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype MeResponseType = { id: number, email: string, login: string }\r\n\r\nexport type FieldErr = {\r\n    field: string\r\n    error: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<FieldErr>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({\r\n        error: error.message ? error.message : 'Some error' +\r\n            ' occurred'\r\n    }))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErr, LoginParamsType, todolistsAPI} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {resetTodolistsAC} from '../TodolistsList/todolists-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(loginTC.fulfilled, state => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logoutTC.fulfilled, state => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErr> } }>\r\n('auth/login', async (param: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({\r\n                errors: res.data.messages,\r\n                fieldsErrors: res.data.fieldsErrors\r\n            })\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({\r\n            errors: [error.message],\r\n            fieldsErrors: undefined\r\n        })\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            thunkAPI.dispatch(resetTodolistsAC())\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const _loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const _logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: false}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(resetTodolistsAC())\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: builder => builder\r\n        .addCase(initializeAppTC.fulfilled, state => {\r\n            state.isInitialized = true\r\n        })\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (arg, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    } finally {\r\n        // dispatch(setAppIsInitializedAC({isInitialized: true}))\r\n        return\r\n    }\r\n})\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC,} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from './tasks-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        // removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n        //     return state.filter(tl => tl.id !== action.payload.id)\r\n        // },\r\n        // addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n        //     state.unshift({\r\n        //         ...action.payload.todolist,\r\n        //         entityStatus: 'idle',\r\n        //         filter: 'all'\r\n        //     })\r\n        // },\r\n        // changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n        //     const {id, title} = action.payload\r\n        //     const index = state.findIndex(tl => tl.id === id)\r\n        //     state[index].title = title\r\n        // },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const {id, filter} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].filter = filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const {id, status} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].entityStatus = status\r\n        },\r\n        resetTodolistsAC(state, action: PayloadAction) {\r\n            return []\r\n        },\r\n    },\r\n    extraReducers: builder => builder\r\n        .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists\r\n                .map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        })\r\n        .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({\r\n                ...action.payload.todolist,\r\n                entityStatus: 'idle',\r\n                filter: 'all'\r\n            })\r\n        })\r\n        .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const {id, title} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].title = title\r\n        })\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, resetTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (arg, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        // dispatch(setTodolistsAC({todolists: res.data}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n\r\n        const todos = await res.data\r\n        todos.forEach(todo => dispatch(fetchTasksTC(todo.id)))\r\n        console.log(res.data)\r\n        return {todolists: res.data}\r\n\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (arg: { id: string, title: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(arg.id, arg.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return arg\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    })\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC,} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                console.log('action', action)\r\n                action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n            })\r\n            .addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTaskTC.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n    const res = await todolistsAPI.getTasks(todolistId);\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {...param}\r\n    })\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (arg: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(arg.todolistId, arg.title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return task\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (arg: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    getState, rejectWithValue\r\n}) => {\r\n    const {taskId, model, todolistId} = arg\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        // console.warn('task not found in the state')\r\n        return rejectWithValue({})\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...model\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer,} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}\r\n                        disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}\r\n                     disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t}\r\n                                                todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        } else navigate('/login')\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, model: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, title: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, model: {title}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useAppDispatch, useAppSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {LoginParamsType} from '../../api/todolists-api';\r\n\r\ntype FormValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            // const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            const errors: Partial<Pick<LoginParamsType, 'password' | 'email' | 'rememberMe'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password.trim()) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.trim().length <= 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValues>) => {\r\n            const action = await dispatch(loginTC(values))\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            // formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) return <Navigate to={'/'}/>\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={formik.values.rememberMe} {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from '../features/Login/Login';\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport { CircularProgress } from '@mui/material'\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    let logoutHandle = () => dispatch(logoutTC());\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandle}>LogOUT</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\"\r\n                           element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT\r\n                               FOUND</h1>}/>\r\n                    <Route path=\"/*\" element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}