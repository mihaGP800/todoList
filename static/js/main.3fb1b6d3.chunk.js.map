{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","features/Auth/selectors.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/selectors.ts","features/TodolistsList/selectors.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/Auth/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","selectIsLoggedIn","state","auth","isLoggedIn","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","tasksReducer","createSlice","name","initialState","reducers","extraReducers","builder","addCase","addTodolistTC","fulfilled","action","payload","todolist","removeTodolistTC","fetchTodolistsTC","todolists","forEach","tl","fetchTasksTC","tasks","removeTaskTC","index","findIndex","t","splice","addTaskTC","todoListId","unshift","updateTaskTC","reducer","createAsyncThunk","thunkAPI","a","res","items","param","arg","rejectWithValue","resultCode","task","item","getState","find","apiModel","deadline","description","priority","startDate","slice","changeTodolistFilterAC","filter","changeTodolistEntityStatusAC","entityStatus","resetTodolistsAC","map","changeTodolistTitleTC","todolistsReducer","actions","todo","setIsLoggedInAC","value","loginTC","logoutTC","authReducer","errors","fieldsErrors","undefined","isInitialized","initializeAppTC","appReducer","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppSelector","useSelector","window","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","selectIsInitialized","selectStatus","selectTodolists","selectTasks","AddItemForm","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","display","alignItems","Checkbox","Delete","fontSize","Todolist","demo","addTask","changeTodolistTitle","onClickButtonFilterHandler","buttonFilter","changeFilter","tasksForTodolist","renderButton","text","Button","Grid","Paper","padding","position","removeTodolist","top","right","paddingTop","TodolistsList","navigate","useNavigate","useEffect","changeStatus","addTodolist","container","spacing","flexWrap","overflowX","allTodolistTasks","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","to","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fb1b6d3.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f3f54432-d8c8-49d7-98bb-7ebfd06f7be2'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login: (data: LoginParamsType) => {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data)\r\n    },\r\n\r\n    me: () => instance.get<ResponseType<MeResponseType>>('auth/me'),\r\n\r\n    logout: () => instance.delete<ResponseType>('auth/login')\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype MeResponseType = { id: number, email: string, login: string }\r\n\r\nexport type FieldErr = {\r\n    field: string\r\n    error: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<FieldErr>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {AppRootStateType} from '../../app/store';\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({\r\n        error: error.message ? error.message : 'Some error' +\r\n            ' occurred'\r\n    }))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app'\r\nimport {setAppStatusAC,} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n            })\r\n            .addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTaskTC.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n    const res = await todolistsAPI.getTasks(todolistId);\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {...param}\r\n    })\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (arg: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(arg.todolistId, arg.title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return task\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (arg: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    getState, rejectWithValue\r\n}) => {\r\n    const {taskId, model, todolistId} = arg\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        // console.warn('task not found in the state')\r\n        return rejectWithValue({})\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...model\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return arg\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC,} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from './tasks-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        // removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n        //     return state.filter(tl => tl.id !== action.payload.id)\r\n        // },\r\n        // addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n        //     state.unshift({\r\n        //         ...action.payload.todolist,\r\n        //         entityStatus: 'idle',\r\n        //         filter: 'all'\r\n        //     })\r\n        // },\r\n        // changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n        //     const {id, title} = action.payload\r\n        //     const index = state.findIndex(tl => tl.id === id)\r\n        //     state[index].title = title\r\n        // },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const {id, filter} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].filter = filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const {id, status} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].entityStatus = status\r\n        },\r\n        resetTodolistsAC(state, action: PayloadAction) {\r\n            return []\r\n        },\r\n    },\r\n    extraReducers: builder => builder\r\n        .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists\r\n                .map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        })\r\n        .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({\r\n                ...action.payload.todolist,\r\n                entityStatus: 'idle',\r\n                filter: 'all'\r\n            })\r\n        })\r\n        .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const {id, title} = action.payload\r\n            const index = state.findIndex(tl => tl.id === id)\r\n            state[index].title = title\r\n        })\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, resetTodolistsAC\r\n} = slice.actions\r\n\r\n// thunks\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (arg, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        // dispatch(setTodolistsAC({todolists: res.data}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n\r\n        const todos = await res.data\r\n        todos.forEach(todo => dispatch(fetchTasksTC(todo.id)))\r\n        return {todolists: res.data}\r\n\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async (arg: { id: string, title: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(arg.id, arg.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return arg\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (error: any) {\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    })\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErr, LoginParamsType} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {resetTodolistsAC} from '../TodolistsList/todolists-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(loginTC.fulfilled, state => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logoutTC.fulfilled, state => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErr> } }>\r\n('auth/login', async (param: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({\r\n                errors: res.data.messages,\r\n                fieldsErrors: res.data.fieldsErrors\r\n            })\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({\r\n            errors: [error.message],\r\n            fieldsErrors: undefined\r\n        })\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            thunkAPI.dispatch(resetTodolistsAC())\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n","import {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: builder => builder\r\n        .addCase(initializeAppTC.fulfilled, state => {\r\n            state.isInitialized = true\r\n        })\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (arg, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    } finally {\r\n        // dispatch(setAppIsInitializedAC({isInitialized: true}))\r\n        return\r\n    }\r\n})\r\n\r\n\r\n\r\n","import {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {authReducer} from '../features/Auth/auth-reducer';\r\nimport {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {AppRootStateType} from './store';\r\n\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;","import {AppRootStateType} from '../../app/store';\r\n\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists;\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n                                                    addItem,\r\n                                                    disabled = false\r\n                                                }: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''} style={{display: \"flex\", alignItems: 'center'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            // size={'small'}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}  >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {Grid, Paper} from '@mui/material';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\ntype colorType =\r\n    'inherit'\r\n    | 'primary'\r\n    | 'secondary'\r\n    | 'success'\r\n    | 'error'\r\n    | 'info'\r\n    | 'warning'\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    // const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    // const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    // const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    const onClickButtonFilterHandler = useCallback((buttonFilter: FilterValuesType) => props.changeFilter(buttonFilter, props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderButton = (buttonFilter: FilterValuesType, text: string, color: colorType) => {\r\n        return <Button\r\n            variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n            onClick={() => onClickButtonFilterHandler(buttonFilter)}\r\n            color={color}\r\n        >{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Grid item style={{width: '350px'}}>\r\n        <Paper style={{width: '100%', padding: '10px', position: \"relative\"}}>\r\n            <h3><EditableSpan value={props.todolist.title}\r\n                              onChange={changeTodolistTitle}/></h3>\r\n            <IconButton onClick={removeTodolist}\r\n                        disabled={props.todolist.entityStatus === 'loading'}\r\n                        style={{position: \"absolute\", top: '0', right: '0'}}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <AddItemForm addItem={addTask}\r\n                         disabled={props.todolist.entityStatus === 'loading'}/>\r\n            {tasksForTodolist.map(t => <Task key={t.id} task={t}\r\n                                             todolistId={props.todolist.id}\r\n                                             removeTask={props.removeTask}\r\n                                             changeTaskTitle={props.changeTaskTitle}\r\n                                             changeTaskStatus={props.changeTaskStatus}\r\n            />)}\r\n            {tasksForTodolist.length\r\n                ? <div style={{paddingTop: '10px'}}>\r\n                    {renderButton('all', 'All', 'inherit')}\r\n                    {renderButton('active', 'Active', 'primary')}\r\n                    {renderButton('completed', 'Completed', 'secondary')}\r\n                </div>\r\n\r\n                : <span style={{display: 'inline-block', padding: '10px', color: 'grey'}}>no tasks</span>\r\n            }\r\n\r\n\r\n            {/*<Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}*/}\r\n            {/*        onClick={onAllClickHandler}*/}\r\n            {/*        color={'inherit'}*/}\r\n            {/*>All*/}\r\n            {/*</Button>*/}\r\n            {/*<Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}*/}\r\n            {/*        onClick={onActiveClickHandler}*/}\r\n            {/*        color={'primary'}>Active*/}\r\n            {/*</Button>*/}\r\n            {/*<Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}*/}\r\n            {/*        onClick={onCompletedClickHandler}*/}\r\n            {/*        color={'secondary'}>Completed*/}\r\n            {/*</Button>*/}\r\n        </Paper>\r\n    </Grid>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from '../Auth';\r\nimport {selectTasks, selectTodolists} from './selectors';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector(selectTodolists)\r\n    const tasks = useAppSelector(selectTasks)\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        } else navigate('/login')\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC({taskId, todolistId}))\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC({title, todolistId}))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC({taskId, model: {status}, todolistId}))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, title: string, todolistId: string) {\r\n        dispatch(updateTaskTC({taskId, model: {title}, todolistId}))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC({id: todolistId, filter: value}))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC({id, title}))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={5} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {todolists.map(tl => {\r\n                let allTodolistTasks = tasks[tl.id]\r\n\r\n                return <Todolist key={tl.id}\r\n                                 todolist={tl}\r\n                                 tasks={allTodolistTasks}\r\n                                 removeTask={removeTask}\r\n                                 changeFilter={changeFilter}\r\n                                 addTask={addTask}\r\n                                 changeTaskStatus={changeStatus}\r\n                                 removeTodolist={removeTodolist}\r\n                                 changeTaskTitle={changeTaskTitle}\r\n                                 changeTodolistTitle={changeTodolistTitle}\r\n                                 demo={demo}/>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useAppDispatch, useAppSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {LoginParamsType} from '../../api/todolists-api';\r\nimport {selectIsLoggedIn} from './selectors';\r\n\r\ntype FormValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            // const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            const errors: Partial<Pick<LoginParamsType, 'password' | 'email' | 'rememberMe'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password.trim()) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.trim().length <= 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValues>) => {\r\n            const action = await dispatch(loginTC(values))\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n            // formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) return <Navigate to={'/'}/>\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={formik.values.rememberMe} {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from './store'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {CircularProgress} from '@mui/material'\r\nimport {logoutTC} from '../features';\r\nimport {selectIsInitialized, selectStatus} from './selectors';\r\nimport {selectIsLoggedIn} from '../features';\r\nimport {TodolistsList} from '../features/TodolistsList';\r\nimport {Login} from '../features/Auth/Login';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useAppSelector(selectStatus)\r\n    const isInitialized = useAppSelector(selectIsInitialized)\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    let logoutHandle = () => dispatch(logoutTC());\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn &&\r\n                        <Button color=\"inherit\" onClick={logoutHandle}>LogOUT</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\"\r\n                           element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT\r\n                               FOUND</h1>}/>\r\n                    <Route path=\"/*\" element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}